Escaped mutants:
================

1) /home/lsv/Projects/food-market-integration-wrapper/src/Request/AbstractRequest.php:75    [M] ProtectedVisibility

--- Original
+++ New
@@ @@
      */
     protected abstract function getUrlQuery() : array;
     protected abstract function resolveQueryData(OptionsResolver $resolver) : void;
-    protected function resolvePostData(OptionsResolver $resolver) : void
+    private function resolvePostData(OptionsResolver $resolver) : void
     {
     }
     protected abstract function handleResponse(string $content) : mixed;


2) /home/lsv/Projects/food-market-integration-wrapper/src/Request/AbstractRequest.php:86    [M] ProtectedVisibility

--- Original
+++ New
@@ @@
     /**
      * @return array<string, mixed>|null
      */
-    protected function getFormData() : ?array
+    private function getFormData() : ?array
     {
         return null;
     }


3) /home/lsv/Projects/food-market-integration-wrapper/src/Request/AbstractRequest.php:108    [M] Coalesce

--- Original
+++ New
@@ @@
     }
     protected function getPostData(string $key) : mixed
     {
-        return $this->resolvedPostData[$key] ?? null;
+        return null ?? $this->resolvedPostData[$key];
     }
     protected function doRequest() : mixed
     {


4) /home/lsv/Projects/food-market-integration-wrapper/src/Request/AbstractRequest.php:153    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
     {
         $reflectionExtractor = new ReflectionExtractor();
         $phpDocExtractor = new PhpDocExtractor();
-        $propertyTypeExtractor = new PropertyInfoExtractor([$reflectionExtractor], [$phpDocExtractor, $reflectionExtractor], [$phpDocExtractor], [$reflectionExtractor], [$reflectionExtractor]);
+        $propertyTypeExtractor = new PropertyInfoExtractor([], [$phpDocExtractor, $reflectionExtractor], [$phpDocExtractor], [$reflectionExtractor], [$reflectionExtractor]);
         $normalizers = [new ArrayDenormalizer(), new DateTimeNormalizer(), new ObjectNormalizer(propertyTypeExtractor: $propertyTypeExtractor)];
         $encoders = [new JsonEncoder()];
         return new Serializer($normalizers, $encoders);


5) /home/lsv/Projects/food-market-integration-wrapper/src/Request/AbstractRequest.php:155    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
     {
         $reflectionExtractor = new ReflectionExtractor();
         $phpDocExtractor = new PhpDocExtractor();
-        $propertyTypeExtractor = new PropertyInfoExtractor([$reflectionExtractor], [$phpDocExtractor, $reflectionExtractor], [$phpDocExtractor], [$reflectionExtractor], [$reflectionExtractor]);
+        $propertyTypeExtractor = new PropertyInfoExtractor([$reflectionExtractor], [$phpDocExtractor, $reflectionExtractor], [], [$reflectionExtractor], [$reflectionExtractor]);
         $normalizers = [new ArrayDenormalizer(), new DateTimeNormalizer(), new ObjectNormalizer(propertyTypeExtractor: $propertyTypeExtractor)];
         $encoders = [new JsonEncoder()];
         return new Serializer($normalizers, $encoders);


6) /home/lsv/Projects/food-market-integration-wrapper/src/Request/AbstractRequest.php:156    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
     {
         $reflectionExtractor = new ReflectionExtractor();
         $phpDocExtractor = new PhpDocExtractor();
-        $propertyTypeExtractor = new PropertyInfoExtractor([$reflectionExtractor], [$phpDocExtractor, $reflectionExtractor], [$phpDocExtractor], [$reflectionExtractor], [$reflectionExtractor]);
+        $propertyTypeExtractor = new PropertyInfoExtractor([$reflectionExtractor], [$phpDocExtractor, $reflectionExtractor], [$phpDocExtractor], [], [$reflectionExtractor]);
         $normalizers = [new ArrayDenormalizer(), new DateTimeNormalizer(), new ObjectNormalizer(propertyTypeExtractor: $propertyTypeExtractor)];
         $encoders = [new JsonEncoder()];
         return new Serializer($normalizers, $encoders);


7) /home/lsv/Projects/food-market-integration-wrapper/src/Request/AbstractRequest.php:157    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
     {
         $reflectionExtractor = new ReflectionExtractor();
         $phpDocExtractor = new PhpDocExtractor();
-        $propertyTypeExtractor = new PropertyInfoExtractor([$reflectionExtractor], [$phpDocExtractor, $reflectionExtractor], [$phpDocExtractor], [$reflectionExtractor], [$reflectionExtractor]);
+        $propertyTypeExtractor = new PropertyInfoExtractor([$reflectionExtractor], [$phpDocExtractor, $reflectionExtractor], [$phpDocExtractor], [$reflectionExtractor], []);
         $normalizers = [new ArrayDenormalizer(), new DateTimeNormalizer(), new ObjectNormalizer(propertyTypeExtractor: $propertyTypeExtractor)];
         $encoders = [new JsonEncoder()];
         return new Serializer($normalizers, $encoders);


8) /home/lsv/Projects/food-market-integration-wrapper/src/Request/GetMarketSellingPoints.php:30    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     protected function resolveQueryData(OptionsResolver $resolver) : void
     {
         $resolver->setRequired([self::MARKET_CODE_IDENTIFIER]);
-        $resolver->setAllowedTypes(self::MARKET_CODE_IDENTIFIER, 'string');
+        
         $resolver->setDefined([self::REQUEST_TAGS]);
         $resolver->setAllowedTypes(self::REQUEST_TAGS, RequestTags::class);
     }


9) /home/lsv/Projects/food-market-integration-wrapper/src/Request/GetMarketSellingPoints.php:33    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         $resolver->setRequired([self::MARKET_CODE_IDENTIFIER]);
         $resolver->setAllowedTypes(self::MARKET_CODE_IDENTIFIER, 'string');
         $resolver->setDefined([self::REQUEST_TAGS]);
-        $resolver->setAllowedTypes(self::REQUEST_TAGS, RequestTags::class);
+        
     }
     protected function getUrlPath() : string
     {


10) /home/lsv/Projects/food-market-integration-wrapper/src/Request/GetMarketSellingPoints.php:59    [M] ArrayOneItem

--- Original
+++ New
@@ @@
                 $data['tags'][] = ['code' => $tag['code'], 'value' => $tag['value']];
             }
         }
-        return $data;
+        return count($data) > 1 ? array_slice($data, 0, 1, true) : $data;
     }
     /**
      * @return array<SellingPoint>


11) /home/lsv/Projects/food-market-integration-wrapper/src/Request/GetSellingPointAvailability.php:46    [M] ArrayOneItem

--- Original
+++ New
@@ @@
             /* @var DateTimeInterface $date */
             $data['date'] = $date->format('Y-m-d');
         }
-        return $data;
+        return count($data) > 1 ? array_slice($data, 0, 1, true) : $data;
     }
     protected function resolveQueryData(OptionsResolver $resolver) : void
     {


12) /home/lsv/Projects/food-market-integration-wrapper/src/Request/GetSellingPointMenusAvailability.php:13    [M] TrueValue

--- Original
+++ New
@@ @@
 class GetSellingPointMenusAvailability extends GetSellingPointMenus
 {
     private const LOAD_PRODUCTS = 'loadProducts';
-    public function setLoadProducts(bool $loadProducts = true) : void
+    public function setLoadProducts(bool $loadProducts = false) : void
     {
         $this->addQueryData(self::LOAD_PRODUCTS, $loadProducts);
     }


13) /home/lsv/Projects/food-market-integration-wrapper/src/Request/GetSellingPointMenusAvailability.php:25    [M] ArrayOneItem

--- Original
+++ New
@@ @@
         if (null !== ($loadProducts = $this->getQueryData(self::LOAD_PRODUCTS))) {
             $data['loadProducts'] = $loadProducts;
         }
-        return $data;
+        return count($data) > 1 ? array_slice($data, 0, 1, true) : $data;
     }
     protected function resolveQueryData(OptionsResolver $resolver) : void
     {


14) /home/lsv/Projects/food-market-integration-wrapper/src/Request/PostOrder.php:44    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     protected function resolvePostData(OptionsResolver $resolver) : void
     {
         $resolver->setRequired([self::ORDER]);
-        $resolver->setAllowedTypes(self::ORDER, PostOrderInterface::class);
+        
     }
     protected function getFormData() : ?array
     {


15) /home/lsv/Projects/food-market-integration-wrapper/src/Request/PostOrder.php:51    [M] DecrementInteger

--- Original
+++ New
@@ @@
     protected function getFormData() : ?array
     {
         $serialized = $this->getSerializer()->serialize($this->getPostData(self::ORDER), 'json');
-        return json_decode($serialized, true, 512, JSON_THROW_ON_ERROR);
+        return json_decode($serialized, true, 511, JSON_THROW_ON_ERROR);
     }
     public function getMethod() : string
     {


16) /home/lsv/Projects/food-market-integration-wrapper/src/Request/PostOrder.php:51    [M] IncrementInteger

--- Original
+++ New
@@ @@
     protected function getFormData() : ?array
     {
         $serialized = $this->getSerializer()->serialize($this->getPostData(self::ORDER), 'json');
-        return json_decode($serialized, true, 512, JSON_THROW_ON_ERROR);
+        return json_decode($serialized, true, 513, JSON_THROW_ON_ERROR);
     }
     public function getMethod() : string
     {


Timed Out mutants:
==================

Skipped mutants:
================

Not Covered mutants:
====================

1) /home/lsv/Projects/food-market-integration-wrapper/src/Request/AbstractRequest.php:198    [M] Identical

--- Original
+++ New
@@ @@
      */
     private function getClient() : HttpClientInterface
     {
-        if (null === self::$authentication) {
+        if (null !== self::$authentication) {
             throw new RuntimeException('You need to authenticate before running');
         }
         if (null === self::$client) {


2) /home/lsv/Projects/food-market-integration-wrapper/src/Request/AbstractRequest.php:199    [M] Throw_

--- Original
+++ New
@@ @@
     private function getClient() : HttpClientInterface
     {
         if (null === self::$authentication) {
-            throw new RuntimeException('You need to authenticate before running');
+            new RuntimeException('You need to authenticate before running');
         }
         if (null === self::$client) {
             self::$client = HttpClient::create(['base_uri' => self::$baseUri, 'headers' => ['x-api-server-access-token' => self::$authentication->getServerAccessToken(), 'x-api-user-access-token' => self::$authentication->getUserAccessToken()]]);


3) /home/lsv/Projects/food-market-integration-wrapper/src/Request/AbstractRequest.php:202    [M] Identical

--- Original
+++ New
@@ @@
         if (null === self::$authentication) {
             throw new RuntimeException('You need to authenticate before running');
         }
-        if (null === self::$client) {
+        if (null !== self::$client) {
             self::$client = HttpClient::create(['base_uri' => self::$baseUri, 'headers' => ['x-api-server-access-token' => self::$authentication->getServerAccessToken(), 'x-api-user-access-token' => self::$authentication->getUserAccessToken()]]);
         }
         return self::$client;
     }
 }


4) /home/lsv/Projects/food-market-integration-wrapper/src/Request/AbstractRequest.php:203    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
             throw new RuntimeException('You need to authenticate before running');
         }
         if (null === self::$client) {
-            self::$client = HttpClient::create(['base_uri' => self::$baseUri, 'headers' => ['x-api-server-access-token' => self::$authentication->getServerAccessToken(), 'x-api-user-access-token' => self::$authentication->getUserAccessToken()]]);
+            self::$client = HttpClient::create(['headers' => ['x-api-server-access-token' => self::$authentication->getServerAccessToken(), 'x-api-user-access-token' => self::$authentication->getUserAccessToken()]]);
         }
         return self::$client;
     }
 }


5) /home/lsv/Projects/food-market-integration-wrapper/src/Request/AbstractRequest.php:205    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
             throw new RuntimeException('You need to authenticate before running');
         }
         if (null === self::$client) {
-            self::$client = HttpClient::create(['base_uri' => self::$baseUri, 'headers' => ['x-api-server-access-token' => self::$authentication->getServerAccessToken(), 'x-api-user-access-token' => self::$authentication->getUserAccessToken()]]);
+            self::$client = HttpClient::create(['base_uri' => self::$baseUri, 'headers' => ['x-api-user-access-token' => self::$authentication->getUserAccessToken()]]);
         }
         return self::$client;
     }
 }


6) /home/lsv/Projects/food-market-integration-wrapper/src/Request/AbstractRequest.php:206    [M] ArrayItem

--- Original
+++ New
@@ @@
             throw new RuntimeException('You need to authenticate before running');
         }
         if (null === self::$client) {
-            self::$client = HttpClient::create(['base_uri' => self::$baseUri, 'headers' => ['x-api-server-access-token' => self::$authentication->getServerAccessToken(), 'x-api-user-access-token' => self::$authentication->getUserAccessToken()]]);
+            self::$client = HttpClient::create(['base_uri' => self::$baseUri, 'headers' => ['x-api-server-access-token' > self::$authentication->getServerAccessToken(), 'x-api-user-access-token' => self::$authentication->getUserAccessToken()]]);
         }
         return self::$client;
     }
 }


7) /home/lsv/Projects/food-market-integration-wrapper/src/Request/AbstractRequest.php:207    [M] ArrayItem

--- Original
+++ New
@@ @@
             throw new RuntimeException('You need to authenticate before running');
         }
         if (null === self::$client) {
-            self::$client = HttpClient::create(['base_uri' => self::$baseUri, 'headers' => ['x-api-server-access-token' => self::$authentication->getServerAccessToken(), 'x-api-user-access-token' => self::$authentication->getUserAccessToken()]]);
+            self::$client = HttpClient::create(['base_uri' => self::$baseUri, 'headers' => ['x-api-server-access-token' => self::$authentication->getServerAccessToken(), 'x-api-user-access-token' > self::$authentication->getUserAccessToken()]]);
         }
         return self::$client;
     }
 }
