Escaped mutants:
================

1) /home/lsv/Projects/food-market-integration-wrapper/src/Request/GetMarketSellingPoints.php:32    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     protected function queryData(OptionsResolver $resolver) : void
     {
         $resolver->setRequired([self::MARKET_CODE_IDENTIFIER]);
-        $resolver->setAllowedTypes(self::MARKET_CODE_IDENTIFIER, 'string');
+        
         $resolver->setDefined([self::REQUEST_TAGS]);
         $resolver->setAllowedTypes(self::REQUEST_TAGS, RequestTags::class);
     }


2) /home/lsv/Projects/food-market-integration-wrapper/src/Request/GetMarketSellingPoints.php:35    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         $resolver->setRequired([self::MARKET_CODE_IDENTIFIER]);
         $resolver->setAllowedTypes(self::MARKET_CODE_IDENTIFIER, 'string');
         $resolver->setDefined([self::REQUEST_TAGS]);
-        $resolver->setAllowedTypes(self::REQUEST_TAGS, RequestTags::class);
+        
     }
     /**
      * @param array<string, mixed> $queryData


3) /home/lsv/Projects/food-market-integration-wrapper/src/Request/Request.php:46    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         self::$client = $client;
     }
-    public function getMethod() : string
+    protected function getMethod() : string
     {
         return 'GET';
     }


4) /home/lsv/Projects/food-market-integration-wrapper/src/Request/Request.php:95    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
     {
         $reflectionExtractor = new ReflectionExtractor();
         $phpDocExtractor = new PhpDocExtractor();
-        $propertyTypeExtractor = new PropertyInfoExtractor([$reflectionExtractor], [$phpDocExtractor, $reflectionExtractor], [$phpDocExtractor], [$reflectionExtractor], [$reflectionExtractor]);
+        $propertyTypeExtractor = new PropertyInfoExtractor([], [$phpDocExtractor, $reflectionExtractor], [$phpDocExtractor], [$reflectionExtractor], [$reflectionExtractor]);
         $normalizers = [new ArrayDenormalizer(), new DateTimeNormalizer(), new ObjectNormalizer(propertyTypeExtractor: $propertyTypeExtractor)];
         $encoders = [new JsonEncoder()];
         return new Serializer($normalizers, $encoders);


5) /home/lsv/Projects/food-market-integration-wrapper/src/Request/Request.php:97    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
     {
         $reflectionExtractor = new ReflectionExtractor();
         $phpDocExtractor = new PhpDocExtractor();
-        $propertyTypeExtractor = new PropertyInfoExtractor([$reflectionExtractor], [$phpDocExtractor, $reflectionExtractor], [$phpDocExtractor], [$reflectionExtractor], [$reflectionExtractor]);
+        $propertyTypeExtractor = new PropertyInfoExtractor([$reflectionExtractor], [$phpDocExtractor, $reflectionExtractor], [], [$reflectionExtractor], [$reflectionExtractor]);
         $normalizers = [new ArrayDenormalizer(), new DateTimeNormalizer(), new ObjectNormalizer(propertyTypeExtractor: $propertyTypeExtractor)];
         $encoders = [new JsonEncoder()];
         return new Serializer($normalizers, $encoders);


6) /home/lsv/Projects/food-market-integration-wrapper/src/Request/Request.php:98    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
     {
         $reflectionExtractor = new ReflectionExtractor();
         $phpDocExtractor = new PhpDocExtractor();
-        $propertyTypeExtractor = new PropertyInfoExtractor([$reflectionExtractor], [$phpDocExtractor, $reflectionExtractor], [$phpDocExtractor], [$reflectionExtractor], [$reflectionExtractor]);
+        $propertyTypeExtractor = new PropertyInfoExtractor([$reflectionExtractor], [$phpDocExtractor, $reflectionExtractor], [$phpDocExtractor], [], [$reflectionExtractor]);
         $normalizers = [new ArrayDenormalizer(), new DateTimeNormalizer(), new ObjectNormalizer(propertyTypeExtractor: $propertyTypeExtractor)];
         $encoders = [new JsonEncoder()];
         return new Serializer($normalizers, $encoders);


7) /home/lsv/Projects/food-market-integration-wrapper/src/Request/Request.php:99    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
     {
         $reflectionExtractor = new ReflectionExtractor();
         $phpDocExtractor = new PhpDocExtractor();
-        $propertyTypeExtractor = new PropertyInfoExtractor([$reflectionExtractor], [$phpDocExtractor, $reflectionExtractor], [$phpDocExtractor], [$reflectionExtractor], [$reflectionExtractor]);
+        $propertyTypeExtractor = new PropertyInfoExtractor([$reflectionExtractor], [$phpDocExtractor, $reflectionExtractor], [$phpDocExtractor], [$reflectionExtractor], []);
         $normalizers = [new ArrayDenormalizer(), new DateTimeNormalizer(), new ObjectNormalizer(propertyTypeExtractor: $propertyTypeExtractor)];
         $encoders = [new JsonEncoder()];
         return new Serializer($normalizers, $encoders);


Timed Out mutants:
==================

Skipped mutants:
================

Not Covered mutants:
====================

1) /home/lsv/Projects/food-market-integration-wrapper/src/Request/Request.php:133    [M] Identical

--- Original
+++ New
@@ @@
      */
     private function getClient() : HttpClientInterface
     {
-        if (null === self::$authentication) {
+        if (null !== self::$authentication) {
             throw new RuntimeException('You need to authenticate before running');
         }
         if (null === self::$client) {


2) /home/lsv/Projects/food-market-integration-wrapper/src/Request/Request.php:134    [M] Throw_

--- Original
+++ New
@@ @@
     private function getClient() : HttpClientInterface
     {
         if (null === self::$authentication) {
-            throw new RuntimeException('You need to authenticate before running');
+            new RuntimeException('You need to authenticate before running');
         }
         if (null === self::$client) {
             self::$client = HttpClient::create(['base_uri' => self::$baseUri, 'headers' => ['x-api-server-access-token' => self::$authentication->getServerAccessToken(), 'x-api-user-access-token' => self::$authentication->getUserAccessToken()]]);


3) /home/lsv/Projects/food-market-integration-wrapper/src/Request/Request.php:137    [M] Identical

--- Original
+++ New
@@ @@
         if (null === self::$authentication) {
             throw new RuntimeException('You need to authenticate before running');
         }
-        if (null === self::$client) {
+        if (null !== self::$client) {
             self::$client = HttpClient::create(['base_uri' => self::$baseUri, 'headers' => ['x-api-server-access-token' => self::$authentication->getServerAccessToken(), 'x-api-user-access-token' => self::$authentication->getUserAccessToken()]]);
         }
         return self::$client;
     }
 }


4) /home/lsv/Projects/food-market-integration-wrapper/src/Request/Request.php:138    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
             throw new RuntimeException('You need to authenticate before running');
         }
         if (null === self::$client) {
-            self::$client = HttpClient::create(['base_uri' => self::$baseUri, 'headers' => ['x-api-server-access-token' => self::$authentication->getServerAccessToken(), 'x-api-user-access-token' => self::$authentication->getUserAccessToken()]]);
+            self::$client = HttpClient::create(['headers' => ['x-api-server-access-token' => self::$authentication->getServerAccessToken(), 'x-api-user-access-token' => self::$authentication->getUserAccessToken()]]);
         }
         return self::$client;
     }
 }


5) /home/lsv/Projects/food-market-integration-wrapper/src/Request/Request.php:140    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
             throw new RuntimeException('You need to authenticate before running');
         }
         if (null === self::$client) {
-            self::$client = HttpClient::create(['base_uri' => self::$baseUri, 'headers' => ['x-api-server-access-token' => self::$authentication->getServerAccessToken(), 'x-api-user-access-token' => self::$authentication->getUserAccessToken()]]);
+            self::$client = HttpClient::create(['base_uri' => self::$baseUri, 'headers' => ['x-api-user-access-token' => self::$authentication->getUserAccessToken()]]);
         }
         return self::$client;
     }
 }


6) /home/lsv/Projects/food-market-integration-wrapper/src/Request/Request.php:141    [M] ArrayItem

--- Original
+++ New
@@ @@
             throw new RuntimeException('You need to authenticate before running');
         }
         if (null === self::$client) {
-            self::$client = HttpClient::create(['base_uri' => self::$baseUri, 'headers' => ['x-api-server-access-token' => self::$authentication->getServerAccessToken(), 'x-api-user-access-token' => self::$authentication->getUserAccessToken()]]);
+            self::$client = HttpClient::create(['base_uri' => self::$baseUri, 'headers' => ['x-api-server-access-token' > self::$authentication->getServerAccessToken(), 'x-api-user-access-token' => self::$authentication->getUserAccessToken()]]);
         }
         return self::$client;
     }
 }


7) /home/lsv/Projects/food-market-integration-wrapper/src/Request/Request.php:142    [M] ArrayItem

--- Original
+++ New
@@ @@
             throw new RuntimeException('You need to authenticate before running');
         }
         if (null === self::$client) {
-            self::$client = HttpClient::create(['base_uri' => self::$baseUri, 'headers' => ['x-api-server-access-token' => self::$authentication->getServerAccessToken(), 'x-api-user-access-token' => self::$authentication->getUserAccessToken()]]);
+            self::$client = HttpClient::create(['base_uri' => self::$baseUri, 'headers' => ['x-api-server-access-token' => self::$authentication->getServerAccessToken(), 'x-api-user-access-token' > self::$authentication->getUserAccessToken()]]);
         }
         return self::$client;
     }
 }
